<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

  <properties>
    <title>Usage</title>
    <author email="zcarioca@zcarioca.net">zcarioca</author>
  </properties>
  
  <body>
    <section name="Table of Contents">
      <ul>
        <li><a href="#Installation">Installation</a></li>
        <li><a href="#Basic_Configuration">Basic Configuration</a></li>
        <li><a href="#Annotations">Annotations</a>
          <ul>
            <li><a href="#aConfigurable">&#64;Configurable</a></li>
            <li><a href="#aConfigurableAttribute">&#64;ConfigurableAttribute</a></li>
            <li><a href="#aConfigurableDateFormat">&#64;ConfigurableDateFormat</a></li>
            <li><a href="#aConfigurableNumberEncoding">&#64;ConfigurableNumberEncoding</a></li>
          </ul>
        </li>
        <li><a href="#Standard_Configuration_Source_Providers">Standard Configuration Source Providers</a>
          <ul>
            <li><a href="#Default_Configuration_Source_Provider">Default Configuration Source Provider</a></li>
            <li><a href="#Filesystem_Configuration_Source_Provider">Filesystem Configuration Source Provider</a></li>
          </ul>
        </li>
        <li><a href="#Advanced_Configuration">Advanced Configuration</a>
          <ul>
            <li><a href="#Reconfiguration_on_Update">Reconfiguration on Update</a></li>
            <li><a href="#Adding_Configuration_Source_Providers">Adding Configuration Source Providers</a></li>
          </ul>
        </li>
        <li><a href="#Supported_Property_Types">Property Types</a></li>
        <li><a href="#Variable_Substitution">Variable Substitution</a></li>
        <li><a href="#Using_the_Library_Without_Spring">Using the Library Without Spring</a></li>
      </ul>
    </section>
    <section name="Installation">
      <p>
        Adding this library to your maven project is as simple as adding the following
        to your dependencies set:
      </p>
      <source>
<![CDATA[
<dependencies>
  <dependency>
    <groupId>net.zcarioca.zcommons</groupId>
    <artifactId>zlib-config</artifactId>
    <version>1.1</version>
  </dependency>
</dependencies>]]>
      </source>
      <p>
        It is also recommended that you provide either Spring 2.5 or later.  This library will work with both Spring 2.5 and Spring 3.x.
        The following are the list of suggested dependencies to allow autowiring and automatic configuration with Spring.
      </p>
      <source><![CDATA[...
   <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-core</artifactId>
      <version>${spring.version}</version>
   </dependency>
      
   <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-beans</artifactId>
      <version>${spring.version}</version>
   </dependency>
      
   <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context</artifactId>
      <version>${spring.version}</version>
   </dependency>
      
   <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-aspects</artifactId>
      <version>${spring.version}</version>
   </dependency>
...]]></source>
    </section>
    <section name="Basic Configuration">
      <p>
        The first step is to initialize the ConfigurationInjectionPostProcessor in Spring's
        application context file.  The simplest possible configuration is as follows:
      </p>
      <source><![CDATA[<import resource="classpath:/zlib-config-default-context.xml"/>]]></source>
      <p>
        The next step is to simply annotate your classes and fields.  To do this there are two
        basic annotations, &#64;Configurable and &#64;ConfigurableAttribute.  The 
        first of these tells the post processor that this class has been marked for 
        configuration.  The second, &#64;ConfigurableAttribute, marks a field
        for configuration and which property to inject.  Additionally, this annotation can be
        used to define default values for the fields. Here is a simple example:
      </p>
      <source>
package my.application;

&#64;Configurable
public class MyConfigurableClass 
{
   &#64;ConfigurableAttribute
   private String objectId;
   
   &#64;ConfigurableAttribute
   private URL serverUrl;
}
      </source>
      <p>
         In the above example, the configuration injector will automatically find the 
         Properties associated to that class, and insert a String with the property name
         <code>objectId</code> and a URL with the property name <code>serverUrl</code>.
      </p>
      <p>
         <strong>NOTE:</strong> Spring will not automatically wire your classes annotated
         with <code>&#64;Configurable</code> as Spring Beans, unless Spring is expressly told to
         do so.  For instance the following class would be wired up as a bean and pre-configured
         by Spring.
      </p>
      <source>
package my.application;

&#64;Component
&#64;Configurable
public class MyConfigurableClass 
{
   &#64;ConfigurableAttribute
   private String objectId;
   
   &#64;ConfigurableAttribute
   private URL serverUrl;
}
      </source>
    </section>
    <section name="Annotations">
      <subsection name="&#64;Configurable">
        <p>
          The &#64;Configurable annotation may take two parameters, a <code>referenceClass</code>
          and a <code>resourceName</code>.  If either of these two values are not
          supplied, the default referenceClass is the class which was annotated, and the 
          default reference implementation is lowercase name of the reference class.
          These two values are used by the <code>ConfigurationSourceProviders</code> to 
          locate the configuration data.  
        </p>
      </subsection>
      <subsection name="&#64;ConfigurableAttribute">
        <p>
          The &#64;ConfigurableAttribute can also take two additional parameters, 
          <code>propertyName</code> and <code>defaultValue</code>. The propertyName
          will default to the name of the property being annotated (defined by the POJO design
          pattern).  This value of this parameter tells the configuration injector which property
          maps to the annotated property.  This can be used if the property does not match the
          configured field.  The defaultValue will be used only if the property's value cannot
          be found in the data source.  This will not be used if there is a problem injecting
          the value into the property.
        </p>
        <p>
          The &#64;ConfigurableAttribute annotation can be placed on either the field, or its 
          getter or setter.  Regardless of where the annotation is placed, the configuration
          injector will always use the setter, if the setter is available (even if the setter 
          is private).  In this way it is possible to modify the content of the property, or
          take further action in relation to the property.  If no setter is available the value
          will be injected directly into the field value.
        </p>
      </subsection>
      <subsection name="&#64;ConfigurableDateFormat">
        <p>
          The &#64;ConfigurableDateFormat can be coupled with the &#64;ConfigurableAttribute
          annotation in order provided the rules to parse properties for <code>java.util.Date</code> 
          and <code>java.util.Calendar</code> objects.  This annotation must be provided for either
          of these two property types, or a <code>ConfigurationException</code> will be thrown.
        </p>
        <p>
          This annotation can also be placed at the top of the configurable class, if all 
          date properties are to use the same parsing rules.  If placed at the top of the class,
          and directly on a property, the property annotation will override the class annotation.
        </p>
        <p>
          The date format uses the same formatting rules provided by the <code>SimpleDateFormat</code>.
        </p>
      </subsection>
      <subsection name="&#64;ConfigurableNumberEncoding">
        <p>
          Similar to the &#64;ConfigurableDateFormat, the &#64;ConfigurableNumberEncoding
          annotation is used as a hint to inform the parser whether the numerical value has been
          encoded in binary, octal, decimal, or hexidecimal.  It will have no effect on floating
          point numbers.  Unlike the date formatting annotation, this annotation is not required,
          and if not provided, it is assumed that the numbers are encoded as decimal digits.
        </p>
        <p>
          Also like the date format annotation, this annotation can be placed at the class level
          and will be overridden by the property level annotations.
        </p>
        <p>
          At this point, there is no plan to allow for custom base encodings.
        </p>
      </subsection>
    </section>
    <section name="Standard Configuration Source Providers">
      <p>
        As stated in the previous section, there are two configuration source providers that are packaged
        with this library.  There is a default provider, which pulls configuration data out of the classpath, 
        and a filesystem configuration source provider, which pulls the configuration data from files on the 
        server.
      </p>
      <p>
        To learn about providing custom configuration source providers, for example a provider that pulls its
        configuration data from database tables, or from a network storage system, see the <a href="spi-tut.html">custom
        provider tutorial</a>.
      </p>
      <subsection name="Default Configuration Source Provider">
        <p>
          The default configuration source provider loads the configuration data
          from a properties file located in the classpath.  To understand exactly how configuration
          will be retrieved, let's assume the following configurable class:
        </p>
        <source>
<![CDATA[package com.my.application;

@Configurable
public class MyClass {
   ...
}]]>
        </source>
        <p>
          The &#64;Configurable annotation will provide a reference class of <code>code.my.application.MyClass</code>,
          and a resource name of <code>myclass</code>.  As a result, the 
          default configuration source provider will attempt to locate
          the configuration file at <code>classpath:/com/my/package/myclass.properties</code>.
          If it cannot locate the file, a <code>Configuration Exception</code> will be thrown.
        </p>
        <p>
          With this implementation it is also possible to provide relative paths to the 
          configuration data.  For instance the following could have been provided, 
          <code>&#64;Configurable(resourceName = "/log4j")</code>.  In this case, the properties
          file would be located at <code>classpath:/log4j.properties</code>.
        </p>
      </subsection>
      <subsection name="Filesystem Configuration Source Provider">
        <p>
          The filesystem configuration source provider will load the properties file out of the file system, by looking in
          the directory <code>${APP_ROOT}/conf</code>, where APP_ROOT is defined by a configurable environment variable.
          Given the same class, the file-system provider will search for a file matching the resource name (case-insensitive)
          in the following locations:
        </p>  
        <ul>
          <li><code>${APP_ROOT}/conf/com/my/application/</code></li>
          <li><code>${APP_ROOT}/conf/</code></li>
        </ul>
        <p>
          It will also look for files with no extension, or a <code>.properties</code> and <code>.xml</code> file extension.
          The first file the provider sees that matches its criteria will be used.  Again, if no file can be found, a
          <code>ConfigurationException</code> will be thrown.
        </p>
        <p>
          Also, if both the default and filesystem configuration source providers can configure the same class, the filesystem 
          provider will take priority.  For more on priorities see the <a href="spi_tut.html">custom configuration source provider
          tutorial</a>.
        </p>
        <p>
          The following system properties can be used to override the default settings of this provider.
        </p>
        <table>
          <thead>
            <tr>
              <th>Java System Property</th>
              <th>Default Value</th>
              <th>Description</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>config.file.rootDirEnvVar</td>
              <td><code>APP_ROOT</code></td>
              <td>This is the name of the environment variable which defines the root directory of the configuration.</td>
            </tr>
            <tr>
              <td>config.file.confDir</td>
              <td><code>conf</code></td>
              <td>
                This is the name of directory, within the application root where configuration files will be located.  If
                set to <code>null</code> or blank, the root application directory will be used.
                For example, if no changes are made to the default behavior, the provider will look for configuration files
                in the directory <code>$APP_ROOT/conf</code>.
              </td>
            </tr>
            <tr>
              <td>config.file.rootDir</td>
              <td><code>null</code></td>
              <td>The root directory for your application.  If set, this value will remove the need for setting an environment variable.</td>
            </tr>
          </tbody>
        </table>
        <p>
          <strong>NOTE:</strong> the filesystem configuration source provider will watch your configuration files, and if changes are made, it has 
          the ability to reconfigure configurable classes during runtime.
        </p>
      </subsection>
    </section>
    <section name="Advanced Configuration">
      <subsection name="Reconfiguration on Update">
        <p>
          Some implementations of the <code>ConfigurationSourceProvider</code> interface can send
          alerts if the original configuration data source is updated outside of the context of the
          application.  In this case it is possible to allow the Configuration Utilities to
          automatically reconfigure your beans.  To do this, simply set the 
          <code>reconfigureOnUpdateEnabled</code> flag to <code>true</code> in your application 
          context file:
        </p>
        <source>
<![CDATA[<bean id="configurationUtilities" 
      class="net.zcarioca.zcommons.config.util.ConfigurationUtilities" factory-method="getInstance">
  <property key="reconfigureOnUpdateEnabled" value="true"/>
</bean>]]>        
        </source>
      </subsection>
      <subsection name="Adding Configuration Source Providers">
        <p>
          Please see the <a href="spi_tut.html">tutorial</a> for creating
          new Configuration Source Providers for more information. 
        </p>
      </subsection>
    </section>
    <section name="Supported Property Types">
      <p>
        The configuration injector can automatically convert properties into strings, primitive 
        types and their wrappers, and any object which takes a single string as a constructor (eg: java.io.File and java.net.URL).
        Using the &#64;ConfigurableDateFormat, it is also possible to inject <code>java.util.Calendar</code> and <code>java.util.Date</code>
        objects. Additionally, an array of any of the above is also available by providing the values as a comma-separated
        list.
      </p>
      <p>
        It is possible to define custom converters for other property types.  See the <a href="converter_tut.html">Custom Converter</a>
        tutorial for more information.
      </p>
    </section>
    <section name="Variable Substitution">
      <p>
        The configuration injector will handle the automatic replacement of variables
        within properties.  This is done using the <code>net.zcarioca.zcommons.config.util.PropertiesBuilder</code>
        class.
      </p>
      <source>
file.dir=/etc/conf
file.path=${file.dir}/filename.properties
      </source>
      <p>
        The property substitution mechanism can also take advantage of Environment and JVM Properties by assigning a 
        custom <code>net.zcarioca.zcommons.config.util.PropertiesBuilderFactory</code> to the ConfigurationUtilities object.
        This object allows the user to make these system and environment wide properties available for substitution or use directly
        in the configuration.  As an example the user could have the following runtime command:
      </p>
      <source>
export APP_HOME="/etc/app/home"

/usr/bin/java -Dmy.custom.prop="Awesome Property" ......
      </source>
      <p>
        In order to access these properties within the application, the use can simply add the following to their Application Context file:
      </p>
      <source>
<![CDATA[<bean id="configurationUtilities" class="net.zcarioca.zcommons.config.util.ConfigurationUtilities"
   factory-method="getInstance">
  <property name="propertiesBuilderFactory">
    <bean class="net.zcarioca.zcommons.config.util.PropertiesBuilderFactory">
      <!-- Adds all the environment variables -->
      <property name="addEnvironmentProperties" value="true"/>
      <!-- Adds all the JVM variables -->
      <property name="addSystemProperties" value="true"/>
    </bean>
  </property>
</bean>]]>
      </source>
    </section>
    <section name="Using the Library Without Spring">
      <p>
        It is possible to take advantage of this library without the use of Spring.
        All of the functionality provided by the zlib-config library is available for use 
        programmatically.  Most of the main classes are singletons (yes I know it's an 
        over used pattern), and they are accessible via a <code>getInstance()</code> method. 
      </p>
      <p>
        As an example the configurable objects may be passed to the <code>ConfigurationUtilities</code>
        singleton as follows:
      </p>
      <source>
ConfigurationUtilities confUtils = ConfigurationUtilities.getInstance();

MyConfigClass myConf = new MyConfigClass();
confUtils.configureBean(myConf);
      </source>
      <p>
        There is even a convenience method to automatically call methods annotated with
        &#64;PostConstruct after the object is configured (which is normally handled by 
        Spring).
      </p>
      <source>
ConfigurationUtilities confUtils = ConfigurationUtilities.getInstance();

MyConfigClass myConf = new MyConfigClass();
confUtils.configureBean(myConf, true); // call &#64;PostConstruct method(s)
      </source>
    </section>
  </body>
</document>
<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

  <properties>
    <title>Custom Configuration Source Providers</title>
    <author email="zcarioca@zcarioca.net">zcarioca</author>
  </properties>
  
  <body>
    <section name="Service Provider Interface (SPI)">
      <p>
        The Configuration Source Providers follow the SPI pattern in Java.  This pattern is designed
        to allow for replaceable components, where the API for these components is defined within an
        interface, and the implementations are discovered at runtime.  Other notable SPI components
        are the Java JDBC and JNDI layers.  There are really only two things required to build a custom
        implementation of an SPI service.  The first is the interface to extend, the second is a text 
        file located in the META-INF directory of your JAR file.
      </p>
    </section>
    <section name="The Interface">
      <p>
        In the case of the zlib-config library, the interface in question is  
        <code>net.zcarioca.zcommons.config.source.ConfigurationSourceProvider</code>.  This interface
        defines a number of methods required to retrieve and properties associated to an object.
      </p>
      <dl>
        <dt>getPriorityLevel()</dt>
        <dd>
          The priority level of a provider determines which providers will act upon an object if multiple providers can support
          its identifier.  The Default provider has a priority of BACKUP, which will only act if no other providers will support
          an object's identifier.  The Filesystem provider has a MEDIUM priority level.  The different levels in order of lowest to 
          highest are as follows: BACKUP, LOW, MEDIUM, HIGH, OVERRIDE.  
        </dd>
        <dt>supportsIdentifier(ConfigurationSourceIdentifer)</dt>
        <dd>
          Determines whether the given identifier can be supported.  For instance, the filesystem provider will only return true, if it is
          configured correctly, and if it can find a configuration file for the provided identifier.
        </dd>
        <dt>getProviderID()</dt>
        <dd>
          This method must return a unique identifier for this interface.
        </dd>
        <dt>getProperties(ConfigurationSourceIdentifier, PropertiesBuilderFactory)</dt>
        <dd>
          This method maps the provided configuration source identifier to a set of properties.  The identifier
          provides a reference class and a resource location to aid with this mapping.
        </dd>
        <dt>postInit() and preDestroy()</dt>
        <dd>
          These two methods are called when the configuration source provider is initialized or destroyed.  These can be used for additional 
          configuration or cleanup.  It should be noted that configuration source providers are not singletons, and many of the same
          type can be constructed.
        </dd>
      </dl>
    </section>
    <section name="META-INF">
      <p>
        In addition to providing an extension to the <code>net.zcarioca.zcommons.config.source.ConfigurationSourceProvider</code>
        interface, a file must be added to the <code>/META-INF/services</code> directory of the completed JAR file.  
        This file must be named "net.zcarioca.zcommons.config.source.ConfigurationSourceProvider" and it should have a list, 
        separated by line-feeds, of the fully qualified name of your implementations.
      </p>
      <p>
        For instance, if you create an implementation of the ConfigurationSourceProvider interface located at
        com.organization.config.impl.MyCustomProvider.java, the following would be files would be required:
      </p>
      <p><code><b>MyCustomProvider.java</b></code></p>
      <source>
package com.organization.config.impl;

import net.zcarioca.zcommons.config.source.ConfigurationSourceProvider;

public MyCustomProvider implements ConfigurationSourceProvider {
   ....
}
      </source>
      <p><code><b>net.zcarioca.zcommons.config.source.ConfigurationSourceProvider</b></code></p>
      <source>
com.organization.config.impl.MyCustomProvider 
      </source>
      <p><b>File Structure:</b></p>
      <source>
JAR File
   |____com
   |     |___organization
   |              |___config
   |                     |___impl
   |                           |___MyCustomProvider.class
   |
   |____META-INF
            |___services
                   |___net.zcarioca.zcommons.config.source.ConfigurationSourceProvider                        
      </source>
      <p>
        Then, simply put your new JAR file on the classpath, and your source provider will be automatically
        available when the application is restarted.
      </p>
    </section>
    <section name="Managing Changes to the Configuration Source">
      <p>
        While the zlib-config library does not contain any implementations which manage changes to the source
        of the configuration data, there is a hook that custom providers can use to request that the configuration injector
        reconfigure beans when the source data has changed.  The <code>ConfigurationUtilities</code> class
        has a method to allow source providers to send an event stating that a given configuration
        source identifier has been updated (<code>configurationUtilities.runReconfiguration(ConfigurationSourceIdentifier)</code>).
        The ConfigurationUtilities also maintains a list of configuration update listeners, one of these is the Spring bean
        post processor, which will reconfigure the beans if the event is received.
      </p>
      <source>
// Inside some block of code in the configuration source
// an update was received that a configuration file was updated

ConfigurationSourceIdentifier sourceId = .... // the source that was updated

// inform all listeners that this source has been updated
ConfigurationUtilities.getInstance().configurationUtilities.runReconfiguration(sourceId);
      </source>
    </section>
  </body>
</document>